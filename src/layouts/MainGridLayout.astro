---
import Footer from "@components/Footer.astro";
import Navbar from "@components/Navbar.astro";
import BackToTop from "@components/control/BackToTop.astro";
import SideBar from "@components/widget/SideBar.astro";
import type { MarkdownHeading } from "astro";
import { Icon } from "astro-icon/components";
import ImageWrapper from "../components/misc/ImageWrapper.astro";
import TOC from "../components/widget/TOC.astro";
import { siteConfig } from "../config";
import {
	BANNER_HEIGHT,
	BANNER_HEIGHT_EXTEND,
	MAIN_PANEL_OVERLAPS_BANNER_HEIGHT,
} from "../constants/constants";
import Layout from "./Layout.astro";

interface Props {
	title?: string;
	banner?: string;
	description?: string;
	lang?: string;
	setOGTypeArticle?: boolean;
	headings?: MarkdownHeading[];
	class?: string;
	isBlogPost?: boolean;
}

const {
	title,
	banner,
	description,
	lang,
	setOGTypeArticle,
	headings = [],
	class: className,
	isBlogPost = false,
} = Astro.props;

const hasBannerCredit =
	siteConfig.banner.enable && siteConfig.banner.credit.enable;
const hasBannerLink = !!siteConfig.banner.credit.url;

const mainPanelTop = siteConfig.banner.enable
	? `calc(${BANNER_HEIGHT}vh - ${MAIN_PANEL_OVERLAPS_BANNER_HEIGHT}rem)`
	: "5.5rem";

// Determine if the sidebar should be shown.
// In blog posts, hide sidebar automatically.
let showSidebar = !isBlogPost;
---

<style>
  /* Default color for light mode */
  #sidebar-toggle-btn svg {
    stroke: currentColor;
  }

  /* White color for dark mode */
  :global(.dark) #sidebar-toggle-btn svg {
    stroke: white;
  }
</style>

<Layout title={title} banner={banner} description={description} lang={lang} setOGTypeArticle={setOGTypeArticle}>

<!-- Navbar -->
<slot slot="head" name="head"></slot>
<div id="top-row" class="z-50 pointer-events-none relative transition-all duration-700 max-w-[var(--page-width)] px-0 md:px-4 mx-auto" class:list={[""]}>
    <div id="navbar-wrapper" class="pointer-events-auto sticky top-0 transition-all">
        <Navbar></Navbar>
    </div>
</div>

<!-- Banner -->
{siteConfig.banner.enable && <div id="banner-wrapper" class={`absolute z-10 w-full transition duration-700 overflow-hidden`} style={`top: -${BANNER_HEIGHT_EXTEND}vh`}>
    <ImageWrapper id="banner" alt="Banner image of the blog" class:list={["object-cover h-full transition duration-700 opacity-0 scale-105"]}
                  src={siteConfig.banner.src} position={siteConfig.banner.position}
    >
    </ImageWrapper>
</div>}

<!-- Main content -->
<div class="absolute w-full z-30 pointer-events-none" style={`top: ${mainPanelTop}`}>
    <div class="relative max-w-[var(--page-width)] mx-auto pointer-events-auto">
        <div
          id="main-grid"
          class:list={[
            "transition duration-700 w-full grid gap-4",
            isBlogPost
              ? "grid-cols-1 justify-items-center"
              : "grid-cols-[17.5rem_auto]", // Always start with sidebar visible for non-blog posts
            className,
          ]}
          style="margin-top:2rem;"
          data-blog-post={isBlogPost}
        >
          <!-- Banner image credit -->
          {hasBannerCredit && <a href={siteConfig.banner.credit.url} id="banner-credit" target="_blank" rel="noopener" aria-label="Visit image source"
                                   class:list={["group onload-animation transition-all absolute flex justify-center items-center rounded-full " +
                                   "px-3 right-4 -top-[3.25rem] bg-black/60 hover:bg-black/70 h-9", {"hover:pr-9 active:bg-black/80": hasBannerLink}]}
            >
                <Icon class="text-white/75 text-[1.25rem] mr-1" name="material-symbols:copyright-outline-rounded" ></Icon>
                <div class="text-white/75 text-xs">{siteConfig.banner.credit.text}</div>
                <Icon class:list={["transition absolute text-[oklch(0.75_0.14_var(--hue))] right-4 text-[0.75rem] opacity-0",
                    {"group-hover:opacity-100": hasBannerLink}]}
                      name="fa6-solid:arrow-up-right-from-square">
                </Icon>
            </a>}

          <!-- Only render sidebar if not a blog post -->
          {!isBlogPost && (
            <aside id="sidebar-container" class="transition-all duration-500">
              <SideBar class="mb-4 row-start-2 row-end-3 col-span-2 lg:row-start-1 lg:row-end-2 lg:col-span-1 lg:max-w-[17.5rem] onload-animation" headings={headings}></SideBar>
            </aside>
          )}

          <main id="swup-container" class="transition-swup-fade overflow-hidden w-full max-w-3xl">
              <div id="content-wrapper" class="onload-animation">
                  <!-- the overflow-hidden here prevent long text break the layout-->
                  <!-- make id different from windows.swup global property -->
                  <slot></slot>
                  <div class="footer col-span-2 onload-animation hidden lg:block">
                      <Footer></Footer>
                  </div>
              </div>
          </main>

          <div class="footer col-span-2 onload-animation block lg:hidden">
              <Footer></Footer>
          </div>
        </div>
        
        <!-- Only show toggle button for non-blog posts -->
        {!isBlogPost && (
          <button
            id="sidebar-toggle-btn"
            class="fixed z-40 top-20 left-2 md:left-4 bg-[var(--card-bg)] rounded-full shadow-lg p-2 transition hover:bg-[var(--btn-plain-bg-hover)] active:bg-[var(--btn-plain-bg-active)]"
            aria-label="Toggle sidebar"
          >
            <svg id="sidebar-icon-show" class="w-6 h-6 hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
            </svg>
            <svg id="sidebar-icon-hide" class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h8m-8 6h16" />
            </svg>
          </button>
        )}

        <BackToTop></BackToTop>
    </div>
</div>

<!-- The things that should be under the banner, only the TOC for now -->
<div class="absolute w-full z-0 hidden 2xl:block">
    <div class="relative max-w-[var(--page-width)] mx-auto">
        <!-- TOC component -->
        {siteConfig.toc.enable && <div id="toc-wrapper" class:list={["hidden lg:block transition absolute top-0 -right-[var(--toc-width)] w-[var(--toc-width)] items-center",
            {"toc-hide": siteConfig.banner.enable}]}
        >
            <div id="toc-inner-wrapper" class="fixed top-14 w-[var(--toc-width)] h-[calc(100vh_-_20rem)] overflow-y-scroll overflow-x-hidden hide-scrollbar">
                <div id="toc" class="w-full h-full transition-swup-fade ">
                    <div class="h-8 w-full"></div>
                    <TOC headings={headings}></TOC>
                    <div class="h-8 w-full"></div>
                </div>
            </div>
        </div>}

        <!-- #toc needs to exist for Swup to work normally -->
        {!siteConfig.toc.enable && <div id="toc"></div>}
    </div>
</div>
</Layout>

<style>
/* Hide sidebar with smooth transition */
#sidebar-container {
  transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.4s ease;
}
</style>

<script>
  // Handle sidebar toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const toggleBtn = document.getElementById('sidebar-toggle-btn');
    const mainGrid = document.getElementById('main-grid');
    const sidebar = document.getElementById('sidebar-container');
    const showIcon = document.getElementById('sidebar-icon-show');
    const hideIcon = document.getElementById('sidebar-icon-hide');
    
    // Check if this is a blog post
    const isBlogPost = mainGrid?.getAttribute('data-blog-post') === 'true';
    
    // Function to update sidebar state
    function updateSidebarState(visible) {
      if (visible) {
        mainGrid?.classList.remove('grid-cols-1', 'justify-items-center');
        mainGrid?.classList.add('grid-cols-[17.5rem_auto]');
        sidebar?.classList.remove('hidden');
        showIcon?.classList.add('hidden');
        hideIcon?.classList.remove('hidden');
      } else {
        mainGrid?.classList.remove('grid-cols-[17.5rem_auto]');
        mainGrid?.classList.add('grid-cols-1', 'justify-items-center');
        sidebar?.classList.add('hidden');
        showIcon?.classList.remove('hidden');
        hideIcon?.classList.add('hidden');
      }
      
      // Save state to localStorage
      localStorage.setItem('sidebar-visible', visible.toString());
    }
    
    // For blog posts, always hide the sidebar
    if (isBlogPost) {
      updateSidebarState(false);
    } else {
      // For non-blog posts, check localStorage
      const sidebarVisible = localStorage.getItem('sidebar-visible') !== 'false';
      updateSidebarState(sidebarVisible);
      
      // Toggle sidebar when button is clicked
      toggleBtn?.addEventListener('click', () => {
        const isCurrentlyVisible = mainGrid?.classList.contains('grid-cols-[17.5rem_auto]');
        updateSidebarState(!isCurrentlyVisible);
      });
    }
  });

  // Add listener for Swup page transitions to handle sidebar visibility
  if (typeof window !== 'undefined') {
    const handlePageTransition = () => {
      // Check if the current URL is a blog post URL
      const isBlogPostURL = window.location.pathname.includes('/posts/');
      const mainGrid = document.getElementById('main-grid');
      const isBlogPostAttr = mainGrid?.getAttribute('data-blog-post') === 'true';
      const sidebar = document.getElementById('sidebar-container');
      const showIcon = document.getElementById('sidebar-icon-show');
      const hideIcon = document.getElementById('sidebar-icon-hide');
      
      if (!mainGrid || !sidebar) return;
      
      // If it's a blog post, hide the sidebar
      if (isBlogPostURL || isBlogPostAttr) {
        // Ensure correct class names
        mainGrid.classList.remove('grid-cols-[17.5rem_auto]');
        mainGrid.classList.add('grid-cols-1', 'justify-items-center');
        sidebar.classList.add('hidden');
        
        if (showIcon && hideIcon) {
          showIcon.classList.remove('hidden');
          hideIcon.classList.add('hidden');
        }
        
        // Update localStorage
        localStorage.setItem('sidebar-visible', 'false');
      } 
      // If it's NOT a blog post (home, about, etc.), show the sidebar
      else {
        // Ensure correct class names for showing sidebar
        mainGrid.classList.remove('grid-cols-1', 'justify-items-center');
        mainGrid.classList.add('grid-cols-[17.5rem_auto]');
        sidebar.classList.remove('hidden');
        
        if (showIcon && hideIcon) {
          showIcon.classList.add('hidden');
          hideIcon.classList.remove('hidden');
        }
        
        // Update localStorage to remember this state
        localStorage.setItem('sidebar-visible', 'true');
      }
    };

    const setupSwupHooks = () => {
      // Run on multiple Swup hooks to ensure it catches all transitions
      window.swup.hooks.on('content:replace', handlePageTransition);
      window.swup.hooks.on('page:view', handlePageTransition);
      window.swup.hooks.on('animation:in:start', handlePageTransition);
      
      // Also run on navigation
      window.swup.hooks.on('link:click', (event) => {
        // Check if the target URL is a blog post
        if (event?.delegateTarget?.href?.includes('/posts/')) {
          // Pre-emptively update localStorage to ensure sidebar stays hidden
          localStorage.setItem('sidebar-visible', 'false');
        } else {
          // Pre-emptively update localStorage to ensure sidebar shows on non-blog pages
          localStorage.setItem('sidebar-visible', 'true');
        }
      });
    };

    if (window.swup) {
      setupSwupHooks();
    } else {
      document.addEventListener('swup:enable', setupSwupHooks);
    }
    
    // Run once more after a short delay to catch any missed transitions
    setTimeout(handlePageTransition, 500);
  }
</script>
